###############################################################################
#  Copyright (c) 2006, 2015 IBM Corporation and others.
#
#  This program and the accompanying materials
#  are made available under the terms of the Eclipse Public License 2.0
#  which accompanies this distribution, and is available at
#  https://www.eclipse.org/legal/epl-2.0/
#
#  SPDX-License-Identifier: EPL-2.0
#
#  Contributors:
#     IBM Corporation - initial API and implementation
#     Olivier Prouvost <olivier.prouvost@opcoach.com> - Bug 441331
###############################################################################
pluginContent.helloWorldCmd.name = Hello, World Command
pluginContent.helloWorldCmd.description=\
<p>This wizard creates a standard plug-in directory structure and \
adds the following:</p>\
<li><b>Command contribution</b>. %template.helloWorldCmd.desc%</li>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.ui.commands</li>\
<li>org.eclipse.ui.handlers</li>\
<li>org.eclipse.ui.bindings</li>\
<li>org.eclipse.ui.menus</li>


pluginContent.intro.name = RCP 3.x application with an intro
pluginContent.intro.description=\
<p>%template.intro.desc%</p>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.core.runtime.products</li>\
<li>org.eclipse.ui.intro</li>\
<li>org.eclipse.ui.intro.config</li>\
<li>org.eclipse.core.runtime.applications</li>\
<li>org.eclipse.ui.perspectives</li>\
<li>org.eclipse.ui.intro.configExtension (if dynamic content selected)</li>

pluginContent.propertyPages.name = Property page
pluginContent.propertyPages.description=\
<p>This wizard creates a standard plug-in directory structure and \
adds the following:</p>\
<li><b>Property Page</b>. %template.propertyPages.desc%</li>\
<p><b>Extension Used</b></p>\
<li>org.eclipse.ui.propertyPages</li>

pluginContent.editor.name = Editor contribution for XML files
pluginContent.editor.description=\
<p>This wizard creates a standard plug-in directory structure and \
adds the following:</p>\
<li><b>Editor</b>. %template.editor.desc%</li>\
<p><b>Extension Used</b></p>\
<li>org.eclipse.ui.editors</li>

pluginContent.extensibleEditor.name = Textual editor, relying on Generic Editor
pluginContent.extensibleEditor.description=\
<p>This wizard creates a standard plug-in directory structure and \
adds the following:</p>\
<li><b>Extensible Editor</b>. %template.extensibleEditor.desc%</li>\
<p><b>Extension Used</b></p>\
<li>org.eclipse.ui.genericeditor.presentationReconcilers</li>\
<li>org.eclipse.ui.genericeditor.hoverProviders</li>\
<li>org.eclipse.ui.genericeditor.contentAssistProcessors</li>\
<li>org.eclipse.ui.genericeditor.autoEditStrategies</li>\
<li>org.eclipse.ui.genericeditor.reconcilers</li>\
<li>org.eclipse.core.filebuffers.documentSetup</li>

pluginContent.browserview.name = View using browser technology
pluginContent.browserview.description=\
<p>This wizard creates a standard plug-in directory structure and \
adds the following:</p>\
<li><b>Browser view</b>. %template.browserview.desc%</li>

pluginContent.view.name = View contribution using 3.x API
pluginContent.view.description=\
<p>This wizard creates a standard plug-in directory structure and \
adds the following:</p>\
<li><b>Sample view</b>. %template.view.desc%</li>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.ui.views</li>\
<li>org.eclipse.ui.perspectiveExtensions</li>\
<li>org.eclipse.help.contexts</li>

pluginContent.multiPageEditor.name = Multi-page editor
pluginContent.multiPageEditor.description=\
<p>This wizard creates a standard plug-in directory structure and \
adds the following:</p>\
<li><b>Sample Multi-page Editor</b>. %template.multiPageEditor.desc%</li>\
<li><b>Sample New Wizard</b>. %template.newWizard.desc%</li>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.ui.editors</li>\
<li>org.eclipse.ui.newWizards</li>

pluginContent.builder.name = Incremental project builder
pluginContent.builder.description=\
<p>This wizard creates a standard plug-in directory structure and \
adds the following:</p>\
<li><b>Sample Incremental Project Builder</b>. The sample builder checks XML files in the project \
and adds a problem marker to not well formed files.</li>\
<li><b>Sample Project Nature</b>. This nature owns the builder.  Builder runs for projects \
of this nature.</li>\
<li><b>Sample Problem Marker</b>. The builder uses this sub-type of a problem marker to mark errors.</li>\
<li><b>Sample Commands and Handlers</b>. A menu contribution in the "Configure" section in a project context menu allows adding or removing \
the sample nature to or from a workspace project.</li>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.core.resources.builders</li>\
<li>org.eclipse.core.resources.markers</li>\
<li>org.eclipse.core.resources.natures</li>\
<li>org.eclipse.ui.commands</li>\
<li>org.eclipse.ui.menus</li>

pluginContent.mail.name = RCP 3.x Mail Template
pluginContent.mail.description=\
<p>This wizard creates a standalone RCP application that shows how to:</p>\
<li>add top-level menu and toolbar with actions</li>\
<li>add keybindings to actions</li>\
<li>create views that can't be closed and multiple instances of the same view</li>\
<li>create perspectives with placeholders for new views</li>\
<li>use the default About dialog</li>\
<li>create a product definition</li>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.core.runtime.applications</li>\
<li>org.eclipse.core.runtime.products</li>\
<li>org.eclipse.ui.commands</li>\
<li>org.eclipse.ui.perspectives</li>\
<li>org.eclipse.ui.views</li>

pluginContent.helloRCP.name = RCP 3.x application (minimal)
pluginContent.helloRCP.description=\
<p>This wizard creates a minimal standalone RCP application that consists of an application window with a title.</p>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.core.runtime.applications</li>\
<li>org.eclipse.ui.perspectives</li>\

pluginContent.helloNonUIRCP.name = Headless Hello RCP
pluginContent.helloNonUIRCP.description=\
<p>This wizard creates a minimal standalone headless RCP application that prints "Hello RCP" to the console.</p>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.core.runtime.applications</li>\

pluginContent.helloOSGi.name = Hello OSGi Bundle
pluginContent.helloOSGi.description=\
<p>This wizard creates a pure OSGi Bundle that prints to the console when it starts and stops.</p>\
<p><b>Imports Used</b></p>\
<li>org.osgi.framework</li>\

pluginContent.viewRCP.name = RCP 3.x application with a view
pluginContent.viewRCP.description=\
<p>This wizard creates a standalone RCP application that consists of an application window with a single view.</p>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.core.runtime.applications</li>\
<li>org.eclipse.ui.perspectives</li>\
<li>org.eclipse.ui.views</li>\

pluginContent.help.name = Sample help content
pluginContent.help.description=This wizard creates a plugin with a \
sample standalone or integrated table of contents.\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.help.toc</li>

pluginContent.helloOSGiService.name = Dictionary OSGi Service
pluginContent.helloOSGiService.description=\
<p>This wizard creates an OSGi Service that registers and uses a simple dictionary service.</p>\
<p><b>Imports Used</b></p>\
<li>org.osgi.framework</li>\
<li>org.osgi.util.tracker</li>\

pluginContent.OSGiPreferencesService.name = Preferences OSGi Service Example
pluginContent.OSGiPreferencesService.description=\
<p>This wizard demonstrates the basic usage of the OSGi Preferences Service.</p>\
<p><b>Imports Used</b></p>\
<li>org.osgi.framework</li>\
<li>org.osgi.util.tracker</li>\
<li>org.osgi.service.prefs</li>\

pluginContent.OSGiSimpleLogService.name= OSGi Simple LogService Example
pluginContent.OSGiSimpleLogService.description=\
<p>This wizard creates and registers an OSGi Service that logs some messages.</p>\
<p><b>Imports Used</b></p>\
<li>org.osgi.framework</li>\


newExtension.templates = Extension Templates

newExtension.templates.helloCmd.name = "Hello, World" command contribution
newExtension.templates.helloCmd.desc = <p>%template.helloWorldCmd.desc%</p>

newExtension.templates.browserview.name = Browser View
newExtension.templates.browserview.desc = <p>%template.browserview.desc%</p>

newExtension.templates.view.name = Sample View
newExtension.templates.view.desc = <p>%template.view.desc%</p>

newExtension.templates.multiPageEditor.name = Multi-page Editor
newExtension.templates.multiPageEditor.desc = <p>%template.multiPageEditor.desc%</p>

newExtension.templates.newWizard.name = New File Wizard
newExtension.templates.newWizard.desc = <p>%template.newWizard.desc%</p>

newExtension.templates.preferences.name = Preference Page
newExtension.templates.preferences.desc = <p>%template.preferences.desc%</p>

newExtension.templates.propertyPages.name = Property Page
newExtension.templates.propertyPages.desc = <p>%template.propertyPages.desc%</p>

newExtension.templates.editor.name = Editor
newExtension.templates.editor.desc = <p>%template.editor.desc%</p>

newExtension.templates.extensibleEditor.name = Extensible Editor
newExtension.templates.extensibleEditor.desc = <p>%template.extensibleEditor.desc%</p>

newExtension.templates.popupMenus.name = Popup Menu
newExtension.templates.popupMenus.desc = <p>%template.popupMenus.desc%</p>

newExtension.templates.help.name = Help Content
newExtension.templates.help.desc = <p>%template.help.desc%</p>

newExtension.templates.builder.name = Project Builder and Nature
newExtension.templates.builder.desc = This template creates an incremental \
project builder and a project nature. The sample builder checks XML files in the project \
and adds a problem marker to not well formed files. The builder runs for projects \
of the sample nature.  Select "Enable Sample Buider" or "Disable Sample Builder" command from \
the "Configure" section of a project context menu, to toggle the nature on a project.

newExtension.templates.decorator.name = Icon Decorator
newExtension.templates.decorator.desc = <p>%template.decorator.desc%</p>

newExtension.templates.universalWelcome.name = Universal Welcome Contribution
newExtension.templates.universalWelcome.desc = <p>%template.universalWelcome.desc%</p>

newExtension.templates.importWizard.name = File Import Wizard
newExtension.templates.importWizard.desc = <p>%template.importWizard.desc%</p>

newExtension.template.commonNavigator.name = Common Navigator View
newExtension.template.commonNavigator.desc = <p>%template.commonNavigator.desc%</p>

template.commonNavigator.desc = This template creates a view implementing \
the common navigator framework with workspace resources as its contents.

template.helloWorldCmd.name = "Hello world" command contribution
template.helloWorldCmd.desc = This template creates a simple command contribution \
that adds <b>Sample Menu</b> to the menu bar and a button to \
the toolbar. Both the menu item in the new menu and the button \
invoke the same <b>Sample Action</b>. Its role is to open a \
simple message dialog with a message of your choice.

template.intro.desc = This wizard creates a minimal standalone RCP application with an intro. \
Sample intro consists of three static pages, and optionally \
a page with content created dynamically.

template.propertyPages.name = Property Page
template.propertyPages.desc = This template adds a property page to a resource and will \
appear in the Properties Dialog for that resource.  This property page can be used to view \
and set application-specific properties of a resource.

template.editor.name = XML Editor
template.editor.desc = This template creates a basic XML editor.  It has all the basic functions \
of an editor, such as cut, copy, paste, find, etc.  It also has syntax highlighting and supports double-clicking.

template.extensibleEditor.name = Textual editor relying on Generic Editor
template.extensibleEditor.desc = This template creates a basic .project editor \
which provides basic syntax highlighting for this content type and error reporting.


template.builder.name = Incremental Builder

template.view.name = Example view extension
template.view.desc = This template creates a workbench view. \
The view is contributed to the workbench by \
creating a category. The view can be opened by selecting \
<b>Window</b>, <b>Show View</b> and then <b>Other...</b> \
on the menu bar. The template demonstrates implementation of \
pop-up menu support, local toolbar, double-click, sorting and \
filtering. There is also an option to add context-sensitive help \
to the view.

template.browserview.name = Example browser view extension
template.browserview.desc = This template creates a workbench view using browser technology. \
The view is contributed to the workbench by \
creating a category. The view can be opened by selecting \
<b>Window</b>, <b>Show View</b> and then <b>Other...</b> \
on the menu bar. The template demonstrates how data can be exchanged \
between Java and JavaScript in the browser.

template.multiPageEditor.name = Multi-page Editor
template.multiPageEditor.desc = This template creates a \
multi-page editor. It works on text files with the chosen extension. \
The editor has three pages: <b>Edit</b> where you enter text, \
<b>Properties</b> that allows you to change font of the result \
and <b>Preview</b> that shows sorted words from the <b>Edit</b> page \
using the font set in <b>Properties</b>. To open the editor, choose \
<b>File</b>, <b>New</b> then <b>Other...</b> from the menu bar. \
In the "Simple" category, choose to create a new file. Use any file \
name, but use the extension the editor is registered for (*.mpe by \
default).

template.newWizard.name = New File Wizard
template.newWizard.desc = This template creates a \
wizard that can create a new file in the workspace. It is designed to \
generate files that can be opened by a <b>Multi-Page Editor</b>. \
To test the wizard, select <b>File</b>, \
<b>New</b> then <b>Other...</b> from the menu bar. When the master \
wizard opens, select the created category and the new wizard registered \
for that category. Make sure that the chosen extension matches \
the extension the multi-page editor is registered for (*.mpe by \
default).

template.preferences.name = Preference Page
template.preferences.desc = This template creates a \
page that is contributed to the Preferences. It demonstrates how \
to create common preference fields and how to save and restore \
values between invocations. To see the result, select \
<b>Window</b> then <b>Preferences...</b> from the menu bar.

template.help.name = Help Table of Contents
template.help.desc = This template creates a Help table of contents. \
If this table is set to primary, it can be standalone, or integrated \
into pre-set categories. If the table is not set to primary, it can \
optionally be integrated into a primary table of contents for testing.


template.decorator.name = Icon Decorator
template.decorator.desc = This template creates a simple <b>declarative</b> image decorator \
<b>or</b> a more specific <b>class based</b> decorator. The declarative instance will add an \
image to all files in the workspace and optionally to the project folders, while the class-based \
example will only decorate Read-only files.

template.importWizard.name = File Import Wizard
template.importWizard.desc = This template creates a basic import wizard that imports \
files from the local file system into a specified location in the workspace. \
It also demonstrates how import categories are defined and how file extension filters are used.

template.universalWelcome.name = Universal Welcome Contribution
template.universalWelcome.desc = This template creates a link in one of sections of the Universal Welcome. \
The product must be using Universal Welcome for this extension to work.

template.perspective.name = Release Engineering Perspective
template.perspective.desc = This template creates a release engineering themed perspective. \
While most users will not be doing any release engineering, the theme allows for a very logical \
layout of the perspective elements and demonstrates how to access the various team \
components from within a perspective.

bundleVendor = Eclipse.org
bundleName = PDE Templates

wizard.name.splash.handler = Splash Handler
wizard.description.splash.handler = This template will create a splash handler that contributes custom behavior to the splash screen.  Three types of splash screen handlers are available:  (1) Interactive:  A simulated log-in session; (2) Browser: An embedded HTML browser; (3) Extensible:  A dynamic set of image contributions.  All the necessary code, images, extensions, and extension points are created automatically.
template.name.splash.handler = Splash Handler

pluginContent.helloDSOSGIService.name=OSGi Declarative Services Example
pluginContent.helloDSOSGIService.description=\
<p>This wizard creates and registers an OSGi Service using <b>Declarative Services</b> that adds an additional command to the Equinox OSGi console.</p>\
<p><b>Imports Used</b></p>\
<li>org.osgi.framework</li>\
<li>org.osgi.util.tracker</li>\
<li>org.eclipse.osgi.framework.console</li>

pluginContent.OSGiEventAdminService.name=OSGi EventAdmin Service Example
pluginContent.OSGiEventAdminService.description=\
<p>This wizard listens to an event topic using the OSGi <b>EventAdmin</b> Service.</p>\
<p><b>Imports Used</b></p>\
<li>org.osgi.framework</li>\
<li>org.osgi.service.event</li>

pluginContent.e4RCP.name = Eclipse RCP application
pluginContent.e4RCP.description=\
<p>This wizard creates a standalone Eclipse RCP application using the the latest Eclipse API. </p>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.core.runtime.products</li>

pluginContent.e4View.name = View contribution using 4.x API
pluginContent.e4View.description=\
<p>This template creates an Eclipse 4 plugin with a model application fragment containing a SWT view (in PartDescriptors).</p>\
<p>It uses the standard xpath:/ notation to add this view in any application model.</p>\
<p>The generated plugin is also compliant with an Eclipse 3 application running with the compatibility layer.</p>\
<p>In this case, the view can be opened by selecting <b>Window</b>, <b>Show View</b> \
and then <b>Other...</b> on the menu bar. </p>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.e4.workbench.model</li>

pluginContent.e4Handler.name = Menu contribution using 4.x API
pluginContent.e4Handler.description=\
<p>This template creates an Eclipse 4 plugin with a model application fragment containing :</p>\
<li>a 'Hello world' command</li>\
<li>a 'Hello world' handler</li>\
<li>a menu contribution to the main menu</li>\
<li>a menu contribution to any popup</li>\
<p>It uses the standard xpath:/ notation to add these contributions to any application model.</p>\
<p>The generated plug-in is also compliant with an Eclipse 3 application running with the compatibility layer.</p>\
<p>The handler can be triggered by selecting <b>E4 Menu > Hello world</b> in the main menu or in any view popup menu</p>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.e4.workbench.model</li>

pluginContent.e4ToolbarContribution.name = Toolbar contribution using e4 API
pluginContent.e4ToolbarContribution.description=\
<p>This template creates an Eclipse 4 plugin with a model application fragment containing :</p>\
<li>a 'Hello world' command</li>\
<li>a 'Hello world' handler</li>\
<li>a trim contribution to the main toolbar</li>\
<p>It uses the standard xpath:/ notation to add these contributions to any application model.</p>\
<p>The generated plugin is also compliant with an Eclipse 3 application running with the compatibility layer.</p>\
<p>The handler can be triggered by pressing the <b>Hello world</b> button in the main toolbar.</p>\
<p><b>Extensions Used</b></p>\
<li>org.eclipse.e4.workbench.model</li>

